<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:MvvmTest">
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Width="12" Height="14">
                        <Path x:Name="ExpandPath" HorizontalAlignment="Right" VerticalAlignment="Center"
                            Fill="DarkGray" Stroke="DarkGray" Data="M 2 2 L 7 7 L 2 12 Z"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1BBBFA"/>
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="ExpandPath" Value="M 1 10 L 7 3 L 7 10 Z"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="#FFE6E6E6"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="DarkGray"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1BBBFA"/>
                            <!--<Setter Property="Fill" TargetName="ExpandPath" Value="DarkGray"/>-->
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <HierarchicalDataTemplate x:Key="TreeViewDataTemplate" ItemsSource="{Binding Children}">
        <Grid MinWidth="120">
            <Grid.InputBindings>
                <!--<MouseBinding MouseAction="LeftDoubleClick" Command="{Binding EditCommand}" CommandParameter="{Binding NodeType}" />-->
            </Grid.InputBindings>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
            </Grid.RowDefinitions>
            <Image Source="{Binding IconPath}" Width="24" Height="24" Grid.RowSpan="2" Margin="0,1,0,1"/>
            <TextBlock Grid.Row="0" Grid.Column="1" Margin="5" VerticalAlignment="Center" Text="{Binding Name}"></TextBlock>

            <Grid.ContextMenu>
                <ContextMenu>
                    <!--<MenuItem Header="发送" Width="150" Height="30" Command="{Binding SendCommand}" Visibility="{Binding Menu_Send_Visibility}" />
                    <MenuItem Header="读取" Width="150" Height="30" Command="{Binding ReadCommand}" Visibility="{Binding Menu_Read_Visibility}" />-->
                    <MenuItem Header="添加" Width="150" Height="30" Command="{Binding AddCommand}" CommandParameter="{Binding NodeType}" Visibility="{Binding Menu_Add_Visibility}" />
                    <!--<MenuItem Header="编辑" Width="150" Height="30" Command="{Binding EditCommand}" CommandParameter="{Binding NodeType}" Visibility="{Binding Menu_Edit_Visibility}" />
                    <MenuItem Header="复制(Ctrl+C)" Width="150" Height="30" Command="{Binding CopyCommand}" Visibility="{Binding Menu_Copy_Visibility}" />
                    <MenuItem Header="粘贴(Ctrl+V)" Width="150" Height="30" Command="{Binding PasteCommand}" Visibility="{Binding Menu_Paste_Visibility}"/>-->
                    <MenuItem Header="删除" Width="150" Height="30" Command="{Binding DeleteCommand}" Visibility="{Binding Menu_Delete_Visibility}" />
                </ContextMenu>
            </Grid.ContextMenu>
        </Grid>
    </HierarchicalDataTemplate>

    <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"></Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel CanVerticallyScroll="True" Orientation="Vertical" HorizontalAlignment="Stretch" IsItemsHost="True"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition  Width="16" MaxWidth="16"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border Grid.ColumnSpan="2" x:Name="Border">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition  Width="16" MaxWidth="16"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"></RowDefinition>
                                    <RowDefinition Height="Auto"></RowDefinition>
                                    <RowDefinition Height="Auto"></RowDefinition>
                                </Grid.RowDefinitions>
                                <Border Grid.ColumnSpan="2" Grid.RowSpan="3"  x:Name="Bd" Margin="-1600,0,0,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                        Background="{Binding Background, ElementName=Border}" SnapsToDevicePixels="true"></Border>
                                <ToggleButton Grid.Row="1" Grid.Column="0" x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{StaticResource ExpandCollapseToggleStyle}"/>
                                <ContentPresenter Grid.Row="1" Grid.Column="1" x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="Left"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                </ContentPresenter>

                            </Grid>
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="Background" Value="Transparent"></Setter>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="Transparent"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="LightBlue" />
                            <Setter Property="Background" TargetName="Expander" Value="LightBlue"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="LightBlue"/>
                            <Setter Property="Background" TargetName="Expander" Value="LightBlue"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewExStyle" TargetType="TreeView">
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="ItemTemplate" Value="{StaticResource TreeViewDataTemplate}"></Setter>
        <Setter Property="ItemContainerStyle" Value="{StaticResource TreeViewItemStyle}"></Setter>
    </Style>
    <Style  TargetType="{x:Type TextBox}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate >
                    <DockPanel  LastChildFill="True">
                        <Ellipse DockPanel.Dock="Right" Margin="2,0" Width="10" Height="10">
                            <Ellipse.Fill>
                                <LinearGradientBrush>
                                    <GradientStop Color="#11FF1111" Offset="0" />
                                    <GradientStop Color="#FFFF0000" Offset="1" />
                                </LinearGradientBrush>
                            </Ellipse.Fill>
                        </Ellipse>
                        <Border BorderBrush="Red" BorderThickness="1">
                            <AdornedElementPlaceholder Name="ph"/>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False"></Condition>
                                <Condition Property="IsMouseOver" Value="True"></Condition>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" Value="#F2F2F2" ></Setter>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="#E3F6FF" ></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                                Value="{Binding RelativeSource={x:Static RelativeSource.Self}, 
                       Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Trigger.Setters>
                    <Setter Property="BorderBrush"  Value="#FFABABAB"/>
                </Trigger.Setters>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>